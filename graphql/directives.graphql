directive @all(
    """
    Specify the class name of the model to use.
    This is only needed when the default model resolution does not work.
    """
    model: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]
) on FIELD_DEFINITION

"""
Return the currently authenticated user as the result of a query.
"""
directive @auth(
    """
    Use a particular guard to retreive the user.
    """
    guard: String
) on FIELD_DEFINITION

directive @belongsTo(
    """
    Specify the relationship method name in the model class,
    if it is named different from the field in the schema.
    """
    relation: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]
) on FIELD_DEFINITION

"""
Resolves a field through the Eloquent `BelongsToMany` relationship.
"""
directive @belongsToMany(
    """
    Specify the relationship method name in the model class,
    if it is named different from the field in the schema.
    """
    relation: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]

    """
    ALlows to resolve the relation as a paginated list.
    Allowed values: paginator, connection.
    """
    type: String

    """
    Specify the default quantity of elements to be returned.
    Only applies when using pagination.
    """
    defaultCount: Int

    """
    Specify the maximum quantity of elements to be returned.
    Only applies when using pagination.
    """
    maxCount: Int

    """
    Specify a custom type that implements the Edge interface
    to extend edge object.
    Only applies when using Relay style "connection" pagination.
    """
    edgeType: String
) on FIELD_DEFINITION

"""
Assign an internal value to an enum key.
"""
directive @enum(
    """
    The internal value of the enum key.
    You can use any constant literal value: https://graphql.github.io/graphql-spec/draft/#sec-Input-Values
    """
    value: Mixed
) on ENUM_VALUE

directive @eq(
    """
    Specify the database column to compare.
    Only required if database column has a different name than the attribute in your schema.
    """
    key: String
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
Assign a resolver function to a field.
"""
directive @field(
    """
    A reference to the resolver function to be used.
    Consists of two parts: a class name and a method name, seperated by an `@` symbol.
    If you pass only a class name, the method name defaults to `__invoke`.
    """
    resolver: String!

    """
    Supply additional data to the resolver.
    """
    args: [String!]
) on FIELD_DEFINITION

"""
Find a model based on the arguments provided.
"""
directive @find(
    """
    Specify the class name of the model to use.
    This is only needed when the default model resolution does not work.
    """
    model: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]
) on FIELD_DEFINITION

"""
Corresponds to [the Eloquent relationship HasMany](https://laravel.com/docs/eloquent-relationships#one-to-many).
"""
directive @hasMany(
    """
    Specify the relationship method name in the model class,
    if it is named different from the field in the schema.
    """
    relation: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]

    """
    ALlows to resolve the relation as a paginated list.
    Allowed values: paginator, connection.
    """
    type: String

    """
    Specify the default quantity of elements to be returned.
    Only applies when using pagination.
    """
    defaultCount: Int

    """
    Specify the maximum quantity of elements to be returned.
    Only applies when using pagination.
    """
    maxCount: Int
) on FIELD_DEFINITION

"""
Call a method with a given `name` on the class that represents a type to resolve a field.
Use this if the data is not accessible as an attribute (e.g. `$model->myData`).
"""
directive @method(
    """
    Specify the method of which to fetch the data from.
    """
    name: String
) on FIELD_DEFINITION

"""
Query multiple entries as a paginated list.
"""
directive @paginate(
    """
    Which pagination style to use.
    Allowed values: paginator, connection.
    """
    type: String = "paginator"

    """
    Specify the class name of the model to use.
    This is only needed when the default model resolution does not work.
    """
    model: String

    """
    Point to a function that provides a Query Builder instance.
    This replaces the use of a model.
    """
    builder: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]

    """
    Overwrite the paginate_max_count setting value to limit the
    amount of items that a user can request per page.
    """
    maxCount: Int

    """
    Use a default value for the amount of returned items
    in case the client does not request it explicitly
    """
    defaultCount: Int
) on FIELD_DEFINITION

"""
Reference a class implementing a scalar definition.
"""
directive @scalar(
    """
    Reference to a class that extends `\GraphQL\Type\Definition\ScalarType`.
    """
    class: String!
) on SCALAR

"""
Generate the snake-case attribute name associated with the camel-case field name.
"""
directive @snake on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
Spread out the nested values of an argument of type input object into it's parent.
"""
directive @spread on ARGUMENT_DEFINITION

"""
Update an Eloquent model with the input values of the field.
"""
directive @update(
    """
    Specify the class name of the model to use.
    This is only needed when the default model resolution does not work.
    """
    model: String

    """
    Set to `true` to use global ids for finding the model.
    If set to `false`, regular non-global ids are used.
    """
    globalId: Boolean = false
) on FIELD_DEFINITION

"""
Use an input value as a [where filter](https://laravel.com/docs/queries#where-clauses).
"""
directive @where(
    """
    Specify the operator to use within the WHERE condition.
    """
    operator: String = "="

    """
    Specify the database column to compare.
    Only required if database column has a different name than the attribute in your schema.
    """
    key: String

    """
    Use Laravel's where clauses upon the query builder.
    """
    clause: String
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
Eager-load an Eloquent relation.
"""
directive @with(
    """
    Specify the relationship method name in the model class,
    if it is named different from the field in the schema.
    """
    relation: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]
) on FIELD_DEFINITION
